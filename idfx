#!/bin/bash

# Title:
#   idfx
#
# Description:
#   This script is part of github repository https://github.com/abobija/idfx
#   There you can find more about this script, as well as latest updates
# 
#   While there is no support for USB devices for now,
#   this tool comes to help you to flash and monitor
#   your ESP-IDF (or ESP8266_SDK) applications on the WSL2.
#
# Author:
#   Alija Bobija (https://abobija.com | https://github.com/abobija)
#
# Usage:
#   idfx COMMAND [PORT]

IDFX_OK=0
IDFX_FAIL=1
IDFX_ENVIRONMENT_STATUS=$IDFX_FAIL
IDFX_PROJECT_NAME=''
IDFX_TARGET=''
IDFX_IS_COMMAND_FORWARDED_TO_IDF_PY=0

# list of commands that will be forwarded to idf.py
IDFX_FORWARD_COMMANDS=(
  'set-target'
  'menuconfig'
  'app'
  'bootloader'
  'clean'
  'fullclean'
  'size'
  'size-components'
  'size-files'
)

IDFX_STATUS_ENV=$IDFX_FAIL
IDFX_STATUS_PROJ=$IDFX_FAIL
IDFX_STATUS_BUILD_CONFIG=$IDFX_FAIL
IDFX_STATUS_ESPTOOL=$IDFX_FAIL
IDFX_STATUS_ESP_IDF_MONITOR=$IDFX_FAIL

set -e

idfx_err() {
	printf "%s\n" "$*" >&2
}

idfx_check_env() {
  if [ $IDFX_STATUS_ENV -eq $IDFX_OK ]; then return $IDFX_OK; fi

  if [[ -z "${WSL_DISTRO_NAME}" ]]; then
    idfx_err "Error: WSL_DISTRO_NAME environment variable is not set"
    return $IDFX_FAIL
  fi

  if [[ -z "${IDF_PATH}" ]]; then
    idfx_err "Error: IDF_PATH environment variable is not set"
    return $IDFX_FAIL
  fi

  IDFX_STATUS_ENV=$IDFX_OK
  return $IDFX_STATUS_ENV
}

idfx_check_proj() {
  if [ $IDFX_STATUS_PROJ -eq $IDFX_OK ]; then return $IDFX_OK; fi

  idfx_check_env

  local IDFX_CMAKE_PROJECT_FILE='CMakeLists.txt'

  if ! [ -f "$IDFX_CMAKE_PROJECT_FILE" ]; then
    idfx_err "Error: Cannot find $IDFX_CMAKE_PROJECT_FILE."
    idfx_err "Are you sure that you are in the project folder?"
    return $IDFX_FAIL
  fi

  IDFX_PROJECT_NAME=$(grep -oP '(?<=project\()[^ ]*(?=[ \)])' $IDFX_CMAKE_PROJECT_FILE)

  IDFX_STATUS_PROJ=$IDFX_OK
  return $IDFX_STATUS_PROJ
}

idfx_check_build_config() {
  if [ $IDFX_STATUS_BUILD_CONFIG -eq $IDFX_OK ]; then return $IDFX_OK; fi

  idfx_check_proj

  local IDFX_CONFIG_ENV_FILE='build/config.env'

  if ! [ -f "$IDFX_CONFIG_ENV_FILE" ]; then
    idfx_err "Error: Cannot find $IDFX_CONFIG_ENV_FILE"
    idfx_err 'Make sure to first build the project with next command'
    idfx_err $'\t''idfx build'
    return $IDFX_FAIL
  fi

  IDFX_TARGET=$(grep -oP '(?<="IDF_TARGET": ")[^"]*' $IDFX_CONFIG_ENV_FILE)

  IDFX_STATUS_BUILD_CONFIG=$IDFX_OK
  return $IDFX_STATUS_BUILD_CONFIG
}

idfx_check_esptool() {
  if [ $IDFX_STATUS_ESPTOOL -eq $IDFX_OK ]; then return $IDFX_OK; fi

  idfx_check_build_config

  if ! command -v python.exe &> /dev/null; then
    idfx_err 'Python needs to be installed on the Windows'
    return $IDFX_FAIL
  fi

  if [[ $(python.exe -c 'import pkgutil; print(1 if pkgutil.find_loader("esptool") else 0)') != '1'* ]]; then
    idfx_err 'Python package "esptool" needs to be installed on the Windows.'
    read -p 'Would you like to install it now (y/n): ' answer

    if [[ "$answer" == 'y' ]]; then
      idfx_err 'Ok. Installing esptool...'
      pip.exe install esptool
      if [[ $? != 0 ]]; then return $?; fi
    else
      idfx_err 'Sorry but esptool needs to be installed'
      return $IDFX_FAIL
    fi
  fi

  IDFX_STATUS_ESPTOOL=$IDFX_OK
  return $IDFX_STATUS_ESPTOOL
}

idfx_check_esp_idf_monitor() {
  if [ $IDFX_STATUS_ESP_IDF_MONITOR -eq $IDFX_OK ]; then return $IDFX_OK; fi

  idfx_check_build_config

  if ! command -v python.exe &> /dev/null; then
    idfx_err 'Python needs to be installed on the Windows'
    return $IDFX_FAIL
  fi

  if [[ $(python.exe -c 'import pkgutil; print(1 if pkgutil.find_loader("esp_idf_monitor") else 0)') != '1'* ]]; then
    idfx_err 'Python package "esp_idf_monitor" needs to be installed on the Windows.'
    read -p 'Would you like to install it now (y/n): ' answer

    if [[ "$answer" == 'y' ]]; then
      idfx_err 'Ok. Installing esp_idf_monitor...'
      pip.exe install esp_idf_monitor
      if [[ $? != 0 ]]; then return $?; fi
    else
      idfx_err 'Sorry but esp_idf_monitor needs to be installed'
      return $IDFX_FAIL
    fi
  fi

  IDFX_STATUS_ESP_IDF_MONITOR=$IDFX_OK
  return $IDFX_STATUS_ESP_IDF_MONITOR
}

idfx_build() {
  idfx_check_proj
  idf.py build

  local err=$?

  if [ $err -eq 0 ]; then
    echo
    echo '┌───────────────────────────────────────────────┐'
    echo '│ Project build complete.                       │'
    echo '│ To flash, run this command: idfx flash (PORT) │'
    echo '└───────────────────────────────────────────────┘'
    echo
  fi

  return $err
}

idfx_check_port() {
  if [ -z "${1}" ]; then
    idfx_err "Error: It seems like you forgot to provide the PORT"
    return $IDFX_FAIL
  fi
}

idfx_flash() {
  idfx_check_esptool
  idfx_check_port "${1}"

  local cmd=$((echo "python.exe -m esptool -p ${1} -b 460800 --before default_reset --after hard_reset --chip $IDFX_TARGET write_flash "; cat build/flash_project_args) | tr '\n' ' ')
  powershell.exe -Command "cd build ; $cmd"

  return $?
}

idfx_erase_flash() {
  idfx_check_esptool
  idfx_check_port "${1}"

  local cmd="python.exe -m esptool -p ${1} -b 460800 --chip $IDFX_TARGET erase_flash"
  powershell.exe -Command "$cmd"

  return $?
}

idfx_monitor() {
  idfx_check_esptool
  idfx_check_esp_idf_monitor
  idfx_check_port "${1}"

  local port="${1}"

  local idf_monitor_path="$IDF_PATH/tools/idf_monitor.py"

  if ! [ -f "$idf_monitor_path" ]; then
    idfx_err "Error: Cannot find $idf_monitor_path"
    return $IDFX_FAIL
  fi

  local wsl_root="\\\\wsl\$\\$WSL_DISTRO_NAME"
  local wsl_pwd=$(pwd)
  local elf_path="/build/$IDFX_PROJECT_NAME.elf"

  if [[ ${wsl_pwd:1:3} == 'mnt' ]]; then
    local win_root="${wsl_pwd:5:1}:${wsl_pwd:6}"
    elf_path="$win_root$elf_path"
  else
    elf_path="$wsl_root$wsl_pwd$elf_path"
  fi

  local additional_args=''

  if grep -qF "address_decoding" "$idf_monitor_path"; then
    additional_args+=" --disable-address-decoding"
  fi

  if [[ $IDFX_TARGET == 'esp8266' ]]; then
    local project_config_file="build/config/sdkconfig.json"
    local monitor_baud=''

    if ! [ -f "$project_config_file" ]; then
      idfx_err "Warning: Config file missing at path: $project_config_file"
    else
      monitor_baud=$(cat build/config/sdkconfig.json | python -c "import sys, json; _conf=json.load(sys.stdin); print(_conf.get('ESP_CONSOLE_UART_BAUDRATE', ''))")
    fi

    if [ -z $monitor_baud ]; then
      idfx_err "Cannot obtain exact monitor baud rate"
    else
      additional_args+=" -b $monitor_baud"
    fi
  fi

  local monitor_cmd=$(echo "python.exe $wsl_root/$idf_monitor_path $additional_args -p ${port} $elf_path")
  powershell.exe -Command "$monitor_cmd"

  return $?
}

idfx_forward_to_idfpy() {
  idfx_check_proj

  for i in ${!IDFX_FORWARD_COMMANDS[@]}; do
    if [[ "${IDFX_FORWARD_COMMANDS[$i]}" == "${1}" ]]; then
      idf.py "${@}"
      IDFX_IS_COMMAND_FORWARDED_TO_IDF_PY=1
    fi
  done

  return $IDFX_OK
}

idfx_usage() {
  idfx_err 'Usage: idfx COMMAND [PORT]

  [PORT] is serial COM Port on the Windows.
         Use the Device Manager to find your port.

  Commands:
    build            - Build the project.
    flash            - Flash the project.
    monitor          - Display serial output.
    bflash           - Build and flash the project.
    all              - Build, flash and monitor the project.
    erase-flash      - Erase entire flash chip.
    help             - Show the usage help.
    set-target       - Set the chip target to build.
    menuconfig       - Run "menuconfig" project configuration tool.
    app              - Build only the app.
    bootloader       - Build only bootloader.
    clean            - Delete build output files from the build directory.
    fullclean        - Delete the entire build directory contents.
    size             - Print basic size information about the app.
    size-components  - Print per-component size information.
    size-files       - Print per-source-file size information.

  Example:
    idfx all COM6
  '
}

idfx_main() {
  shift $(($OPTIND-1))

  local cmd=$1 port=$2

  case "${cmd}" in
    build)
      idfx_build ;;
    flash)
      idfx_flash "${port}"

      if [[ $? == 0 && "${3}" == 'monitor' ]]; then
        idfx_monitor "${port}"
      fi
      ;;
    monitor)
      idfx_monitor "${port}" ;;
    bflash)
      idfx_build && idfx_flash "${port}" ;;
    all)
      idfx_build && idfx_flash "${port}" && idfx_monitor "${port}" ;;
    'erase-flash')
      idfx_erase_flash ${port} ;;
    help)
      idfx_usage ;;
    *)
      if [ -n "${1}" ]; then
        idfx_forward_to_idfpy "${@}"
      fi

      if [[ $IDFX_IS_COMMAND_FORWARDED_TO_IDF_PY != 1 ]]; then
        idfx_err 'Invalid or missing command'
        idfx_usage
      fi
      ;;
  esac
}

idfx_main "${@}"
